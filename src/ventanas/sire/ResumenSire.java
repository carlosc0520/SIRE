package ventanas.sire;

import ventanas.helpers.Helpers;
import clases.ColumnasSire;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author user1
 */
public class ResumenSire extends javax.swing.JFrame {

    ArrayList<ColumnasSire> columnasTable;
    DefaultListModel<String> listModel = new DefaultListModel<>();
    private JTable tabla;
    String title;
    Helpers helpers = new Helpers();
    private Integer columnComprobante;
    Map<String, String> documentosNew = new HashMap<>();
    Map<Object, String> pocisionesGlobal = new HashMap<>();
    Map<Object, Integer> comprobantes = new HashMap<>();

    public ResumenSire(String title, JTable tabla, ArrayList<ColumnasSire> columnas, Integer columnComprobante, Map<String, String> documentos) {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.JCBoxCampoFilter1.setPreferredSize(new Dimension(100, 30));
        this.columnasTable = columnas;
        this.tabla = tabla;
        this.title = title;
        this.columnComprobante = columnComprobante;

        this.documentosNew = documentos;
        this.setTitle("REPORTE " + title);

        JDLoading.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        JDLoading.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        JDLoading.setSize(250, 150); // Ajusta el tamaño del diálogo según tus necesidades
        JDLoading.setLocationRelativeTo(null);
        ImageIcon loadingIcon = new ImageIcon("src/resources/Spinner.gif"); // Reemplaza "ruta_de_tu_archivo.gif" con la ruta de tu archivo GIF
        loadingIcon = new ImageIcon(loadingIcon.getImage().getScaledInstance(JDLoading.getWidth(), JDLoading.getHeight(), Image.SCALE_DEFAULT));
        jLabel6.setIcon(loadingIcon);
        jLabel6.setOpaque(false);

        JLTitleVentana6.setText("COMPROBANTES " + title);
        JLTitleVentana6.setHorizontalAlignment(SwingConstants.CENTER); // Centra el texto horizontalmente
        JLTitleVentana6.setVerticalAlignment(SwingConstants.CENTER); // Centra el texto verticalmente

        // Asigna el modelo al JList
        setIconImage(getIconImage());
        JTPCampos1.setModel(listModel);

        actualizarSelectColumns();
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("resources/logosystem.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JDLoading = new javax.swing.JDialog();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTPCampos1 = new javax.swing.JList<>();
        JBExportarPDFComp1 = new javax.swing.JToggleButton();
        JCBoxCampoFilter1 = new javax.swing.JComboBox<>();
        JBExportarResumenComp1 = new javax.swing.JToggleButton();
        JBQuitarCampo1 = new javax.swing.JToggleButton();
        JBAgregarCampo1 = new javax.swing.JToggleButton();
        jLabel8 = new javax.swing.JLabel();
        JLTitleVentana6 = new javax.swing.JLabel();
        JCheckTodos = new javax.swing.JCheckBox();
        JSTable = new javax.swing.JScrollPane();
        JTResumen = new javax.swing.JTable();

        JDLoading.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        JDLoading.setTitle("Espere un momento..");
        JDLoading.setBackground(new java.awt.Color(255, 255, 255));
        JDLoading.setResizable(false);
        JDLoading.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Spinner.gif"))); // NOI18N
        JDLoading.getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 240, 130));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(242, 239, 239));

        JTPCampos1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                JTPCampos1AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(JTPCampos1);

        JBExportarPDFComp1.setBackground(new java.awt.Color(235, 235, 235));
        JBExportarPDFComp1.setText("VER");
        JBExportarPDFComp1.setFocusPainted(false);
        JBExportarPDFComp1.setFocusable(false);
        JBExportarPDFComp1.setRolloverEnabled(false);
        JBExportarPDFComp1.setVerifyInputWhenFocusTarget(false);
        JBExportarPDFComp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBExportarPDFComp1ActionPerformed(evt);
            }
        });

        JBExportarResumenComp1.setBackground(new java.awt.Color(235, 235, 235));
        JBExportarResumenComp1.setText("EXCEL");
        JBExportarResumenComp1.setFocusPainted(false);
        JBExportarResumenComp1.setFocusable(false);
        JBExportarResumenComp1.setRolloverEnabled(false);
        JBExportarResumenComp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBExportarResumenComp1ActionPerformed(evt);
            }
        });

        JBQuitarCampo1.setBackground(new java.awt.Color(235, 235, 235));
        JBQuitarCampo1.setText("QUITAR");
        JBQuitarCampo1.setFocusPainted(false);
        JBQuitarCampo1.setFocusable(false);
        JBQuitarCampo1.setRolloverEnabled(false);
        JBQuitarCampo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBQuitarCampo1ActionPerformed(evt);
            }
        });

        JBAgregarCampo1.setBackground(new java.awt.Color(235, 235, 235));
        JBAgregarCampo1.setText("AGREGAR");
        JBAgregarCampo1.setFocusPainted(false);
        JBAgregarCampo1.setFocusable(false);
        JBAgregarCampo1.setRolloverEnabled(false);
        JBAgregarCampo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBAgregarCampo1ActionPerformed(evt);
            }
        });

        jLabel8.setText("CAMPOS");

        JLTitleVentana6.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        JCheckTodos.setText("Todos");
        JCheckTodos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                JCheckTodosStateChanged(evt);
            }
        });
        JCheckTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCheckTodosActionPerformed(evt);
            }
        });

        JTResumen.setAutoCreateRowSorter(true);
        JTResumen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        JTResumen.setAutoResizeMode(0);
        JTResumen.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        JTResumen.setGridColor(new java.awt.Color(255, 255, 255));
        JTResumen.setSelectionBackground(new java.awt.Color(102, 102, 102));
        JTResumen.setSelectionForeground(new java.awt.Color(255, 255, 255));
        JSTable.setViewportView(JTResumen);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 20, Short.MAX_VALUE)
                        .addComponent(JSTable, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JCBoxCampoFilter1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(JCheckTodos))
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JBAgregarCampo1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JBQuitarCampo1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JBExportarResumenComp1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JBExportarPDFComp1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(JLTitleVentana6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(JLTitleVentana6, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JCBoxCampoFilter1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JCheckTodos)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JBAgregarCampo1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(JBQuitarCampo1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(JBExportarResumenComp1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(JBExportarPDFComp1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(JSTable, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBExportarResumenComp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBExportarResumenComp1ActionPerformed
        // TODO add your handling code here:
        generateData(2);
    }//GEN-LAST:event_JBExportarResumenComp1ActionPerformed

    private void JBAgregarCampo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBAgregarCampo1ActionPerformed
        // Obtén el nombre que deseas agregar
        Integer select = JCBoxCampoFilter1.getSelectedIndex();

        if (select != 0) {
            String nuevoNombre = JCBoxCampoFilter1.getSelectedItem().toString();

            // Verifica si el nombre no existe en ningún elemento del JList
            boolean nombreNoExiste = true;

            for (int i = 0; i < listModel.getSize(); i++) {
                String elemento = listModel.getElementAt(i);
                if (elemento.equals(nuevoNombre)) {
                    nombreNoExiste = false;
                    break; // El nombre ya existe, no es necesario seguir buscando
                }
            }

            // Si el nombre no existe en ningún elemento del JList, agrégalo
            if (nombreNoExiste) {
                listModel.addElement(nuevoNombre);
            }
        }
    }//GEN-LAST:event_JBAgregarCampo1ActionPerformed

    private void JTPCampos1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_JTPCampos1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_JTPCampos1AncestorAdded

    private void JCheckTodosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_JCheckTodosStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_JCheckTodosStateChanged

    private void JBQuitarCampo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBQuitarCampo1ActionPerformed
        int selectedIndex = JTPCampos1.getSelectedIndex();

        if (selectedIndex != -1) {
            listModel.remove(selectedIndex);
        }
    }//GEN-LAST:event_JBQuitarCampo1ActionPerformed

    private void JCheckTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCheckTodosActionPerformed
        // TODO add your handling code here:
        if (JCheckTodos.isSelected()) {
            listModel.removeAllElements();
            for (int i = 1; i < JCBoxCampoFilter1.getItemCount(); i++) {
                listModel.addElement(JCBoxCampoFilter1.getItemAt(i));
            }
        } else {
            listModel.removeAllElements();
        }
    }//GEN-LAST:event_JCheckTodosActionPerformed

    private void JBExportarPDFComp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBExportarPDFComp1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) JTResumen.getModel();
        model.setRowCount(0);

        generateData(1);

    }//GEN-LAST:event_JBExportarPDFComp1ActionPerformed

    public void generateData(int formato) {
        Map<Object, String> pocisiones = new HashMap<>();
        Map<Object, Integer> comprobantesAgrupados = new HashMap<>();

        if (listModel.getSize() > 0) {
            // 1. Inicializa pocisionesGlobal aquí para evitar acumulación de datos
            pocisionesGlobal = new HashMap<>();

            for (int i = 0; i < listModel.getSize(); i++) {
                String elemento = listModel.getElementAt(i);
                String[] partes = elemento.split("-");
                if (partes.length > 0) {
                    try {
                        Integer posicion = Integer.parseInt(partes[0].trim());
                        String clave = partes[1].trim();
                        pocisiones.put(posicion, clave);
                    } catch (NumberFormatException e) {
                        e.printStackTrace(); // Opcional: muestra información del error
                    }
                }
            }

            // 2. Copia los valores de pocisiones a pocisionesGlobal
            pocisionesGlobal.putAll(pocisiones);

            DefaultTableModel modeloTablaOriginal = (DefaultTableModel) tabla.getModel();
            Map<Object, Map<Object, Double>> totalesAgrupados = new HashMap<>();

            for (int fila = 0; fila < modeloTablaOriginal.getRowCount(); fila++) {
                Object agrupador = modeloTablaOriginal.getValueAt(fila, columnComprobante);

                // 3. Verifica si el agrupador ya existe en totalesAgrupados
                if (!totalesAgrupados.containsKey(agrupador)) {
                    totalesAgrupados.put(agrupador, new HashMap<>());
                    comprobantesAgrupados.put(agrupador, 1);
                } else {
                    Integer valorActual = comprobantesAgrupados.get(agrupador);
                    comprobantesAgrupados.put(agrupador, valorActual + 1);
                }

                for (Map.Entry<Object, String> entry : pocisiones.entrySet()) {
                    Integer clave = (Integer) entry.getKey();
                    String posicion = (String) entry.getValue();

                    Object valorCelda = modeloTablaOriginal.getValueAt(fila, clave);

                    if (esNumeroValido((String) valorCelda)) {
                        Double valorFloat = Double.parseDouble((String) valorCelda);

                        Map<Object, Double> mapaInterno = totalesAgrupados.get(agrupador);

                        if (!mapaInterno.containsKey(clave)) {
                            mapaInterno.put(clave, valorFloat);
                        } else {
                            Double valorNuevo = mapaInterno.get(clave);
                            mapaInterno.put(clave, valorNuevo + valorFloat);
                        }
                    }
                }
            }

            comprobantes = comprobantesAgrupados;
            if (formato == 1) {
                DefaultTableModel tableModel = (DefaultTableModel) JTResumen.getModel();

                // 4. Llama a actualizarJTable solo una vez
                actualizarJTable(totalesAgrupados, tableModel);
            } else {
                crearExcelYGuardar(totalesAgrupados);
            }
        } else {
            helpers.mensajeError("No hay campos agregados para exportar a PDF, validar!.", 2);
        }
    }

// Función para imprimir totales agrupados en un PDF
    public void actualizarJTable(Map<Object, Map<Object, Double>> totalesAgrupados, DefaultTableModel tableModel) {
        tableModel.setColumnCount(0); // Elimina las columnas existentes en el modelo de la tabla

        // Crear encabezados de columna en el modelo de la tabla
        tableModel.addColumn("TIPO DE DOCUMENTO");
        tableModel.addColumn("TOTAL DOCUMENTOS");

        int columnIndex = 2;
        Iterator<Map.Entry<Object, String>> iterator = pocisionesGlobal.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<Object, String> entry = iterator.next();
            Object key = entry.getKey();
            String value = entry.getValue();
            tableModel.addColumn(value);
        }

        for (Map.Entry<Object, Map<Object, Double>> entry : totalesAgrupados.entrySet()) {
            Object[] rowData = new Object[pocisionesGlobal.size() + 2]; // Crear un array para almacenar los datos de la fila

            Object agrupador = entry.getKey();

            rowData[0] = agrupador + " " + documentosNew.getOrDefault(agrupador, "");
            rowData[1] = comprobantes.get(agrupador);

            columnIndex = 2;

            for (Map.Entry<Object, String> entryVal : pocisionesGlobal.entrySet()) {
                Integer posicion = (Integer) entryVal.getKey();
                Double monto = entry.getValue().get(posicion);

                rowData[columnIndex] = convertirDecimal(monto);

                columnIndex++;
            }
            tableModel.addRow(rowData);
        }
    }

    public String convertirDecimal(Double monto) {
        try{
            DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.getDefault());
            symbols.setGroupingSeparator(',');
            DecimalFormat decimalFormat = new DecimalFormat("#,##0.00", symbols);
            return decimalFormat.format(monto);
        }catch(Exception e){
            return "";
        }
    }

    public void crearExcelYGuardar(Map<Object, Map<Object, Double>> totalesAgrupados) {
        SwingWorker<Void, Void> excelGenerationWorker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                Workbook workbook = new XSSFWorkbook();
                Sheet sheet = workbook.createSheet("REPORTE " + title);

                // Crear encabezados de columna
                Row headerRow = sheet.createRow(0);
                headerRow.createCell(0).setCellValue("TIPO DE DOCUMENTO");
                headerRow.createCell(1).setCellValue("TOTAL DOCUMENTOS");

                // Obtener las claves de las columnas dinámicas (posición 1 de cualquier agrupador)
                int columnIndex = 2;
                Iterator<Map.Entry<Object, String>> iterator = pocisionesGlobal.entrySet().iterator();
                while (iterator.hasNext()) {
                    Map.Entry<Object, String> entry = iterator.next();
                    Object key = entry.getKey();
                    String value = entry.getValue();
                    headerRow.createCell(columnIndex).setCellValue(value.toString());
                    columnIndex++;
                }

                int rowNum = 1;
                for (Map.Entry<Object, Map<Object, Double>> entry : totalesAgrupados.entrySet()) {
                    Object agrupador = entry.getKey();

                    Row row = sheet.createRow(rowNum++);
                    row.createCell(0).setCellValue(agrupador + " " + documentosNew.getOrDefault(agrupador, ""));
                    row.createCell(1).setCellValue(comprobantes.get(agrupador));

                    columnIndex = 2;
                    for (Map.Entry<Object, String> entryVal : pocisionesGlobal.entrySet()) {
                        Integer posicion = (Integer) entryVal.getKey();

                        Double valor = entry.getValue().get(posicion);

                        if (valor != null) {
                            row.createCell(columnIndex).setCellValue(valor);
                        } else {
                            row.createCell(columnIndex).setCellValue(0); // Si no hay valor, establece 0
                        }
                        columnIndex++;
                    }
                }

                // Crear la última fila para las fórmulas SUM
                Row sumRow = sheet.createRow(rowNum);
                sumRow.createCell(0).setCellValue("Total:");
                for (int i = 2; i < columnIndex; i++) {
                    Cell sumCell = sumRow.createCell(i);
                    char columnChar = (char) ('A' + i);
                    String formula = "SUM(" + columnChar + "2:" + columnChar + (rowNum) + ")";
                    sumCell.setCellFormula(formula);
                }

                // Aplicar color celeste a las celdas de la primera fila (fila 0)
                CellStyle headerCellStyle = workbook.createCellStyle();
                headerCellStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
                headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

                for (int i = 0; i < columnIndex; i++) {
                    Cell headerCell = headerRow.getCell(i);
                    headerCell.setCellStyle(headerCellStyle);
                }

                // Autoajustar el ancho de las columnas a partir de la columna 2
                for (int i = 1; i < columnIndex; i++) {
                    sheet.autoSizeColumn(i);
                }

                // Mostrar el diálogo para guardar el archivo
                mostrarDialogoGuardar(workbook);

                return null;
            }

            @Override
            protected void done() {
                JDLoading.dispose();
            }
        };

        excelGenerationWorker.execute();
        JDLoading.setVisible(true);
    }

    public void mostrarDialogoGuardar(Workbook workbook) {
        FileDialog fileDialog = new FileDialog(new Frame(), "Guardar Excel", FileDialog.SAVE);

        // Establecer un nombre de archivo predeterminado
        fileDialog.setFile("REPORTE_" + title + "_" + helpers.obtenerFechaActual() + ".xlsx");

        // Mostrar el diálogo
        fileDialog.setVisible(true);

        // Obtener la ubicación seleccionada por el usuario
        String directory = fileDialog.getDirectory(); // Directorio seleccionado
        String file = fileDialog.getFile(); // Nombre del archivo seleccionado

        if (directory != null && file != null) {
            String filePath = directory + file;

            try {
                // Guardar el archivo Excel en la ubicación seleccionada
                FileOutputStream outputStream = new FileOutputStream(filePath);
                workbook.write(outputStream);
                outputStream.close();

            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            helpers.mensajeError("No se seleccionó una ubicación de archivo, validar!.", 2);
        }
    }

    public boolean esNumeroValido(String cadena) {
        try {
            Float.parseFloat(cadena);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    public static List<String> dividirCadena(String cadena, int longitudMaxima) {
        List<String> fragmentos = new ArrayList<>();
        int startIndex = 0;
        int endIndex;

        while (startIndex < cadena.length()) {
            endIndex = Math.min(startIndex + longitudMaxima, cadena.length());

            // Asegurarse de no dividir en medio de una palabra
            if (endIndex < cadena.length() && !Character.isWhitespace(cadena.charAt(endIndex))) {
                while (endIndex > startIndex && !Character.isWhitespace(cadena.charAt(endIndex))) {
                    endIndex--;
                }
            }

            String fragmento = cadena.substring(startIndex, endIndex).trim();
            fragmentos.add(fragmento);
            startIndex = endIndex;

            // Eliminar espacios en blanco al principio del siguiente fragmento
            while (startIndex < cadena.length() && Character.isWhitespace(cadena.charAt(startIndex))) {
                startIndex++;
            }
        }

        return fragmentos;
    }

    private void actualizarSelectColumns() {
        JCBoxCampoFilter1.removeAllItems();
        JCBoxCampoFilter1.addItem("-- SELECCIONE");
        int position = 1;
        for (ColumnasSire elemento : this.columnasTable) {
            if (elemento.getTYPECOLUMN() == 3) {
                JCBoxCampoFilter1.addItem(elemento.getNPCSN() + " - " + elemento.getDSCRPCN().toUpperCase());
                position++;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResumenSire.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResumenSire.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResumenSire.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResumenSire.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResumenSire(null, null, null, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton JBAgregarCampo1;
    private javax.swing.JToggleButton JBExportarPDFComp1;
    private javax.swing.JToggleButton JBExportarResumenComp1;
    private javax.swing.JToggleButton JBQuitarCampo1;
    private javax.swing.JComboBox<String> JCBoxCampoFilter1;
    private javax.swing.JCheckBox JCheckTodos;
    private javax.swing.JDialog JDLoading;
    private javax.swing.JLabel JLTitleVentana6;
    private javax.swing.JScrollPane JSTable;
    private javax.swing.JList<String> JTPCampos1;
    private javax.swing.JTable JTResumen;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
